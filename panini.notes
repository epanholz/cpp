
== difference to c ==

C is a procedural programming language and does not support classes and 
objects, nn the other hand, C++ supports both procedural and 
object-oriented programming paradigms. Both are statically typed languages, 
which means the data types must be declared and considered at all times.

== procedural procedural ==

Procedural programming is a programming paradigm built around the idea 
that programs are sequences of instructions to be executed. They focus 
heavily on splitting up programs into named sets of instructions called 
procedures, analogous to functions. A procedure can store local data 
that is not accessible from outside the procedureâ€™s scope and can also 
access and modify global data variables.

== object oriented programming ==

Object-oriented programming (OOP) is a computer programming model that 
organizes software design around data, or objects, rather than functions 
and logic. An object can be defined as a data field that has unique 
attributes and behavior.
OOP focuses on the objects that developers want to manipulate rather than 
the logic required to manipulate them. This approach to programming is
well-suited for programs that are large, complex and actively updated or 
maintained. This includes programs for manufacturing and design, as well 
as mobile applications; for example, OOP can be used for manufacturing 
system simulation software.

== basic stuff ==

--> Object
Objects have states and behaviors. Example: A dog has states - color, 
name, breed as well as behaviors - wagging, barking, eating. An object 
is an instance of a class.

--> Class
A class can be defined as a template/blueprint that describes the 
behaviors/states that object of its type support.

(phonebook would be the class, phonebook entries would be objects)

--> Methods
A method is basically a behavior. A class can contain many methods. 
It is in methods where the logics are written, data is manipulated 
and all the actions are executed.

--> Instance Variables
Each object has its unique set of instance variables. An object's 
state is created by the values assigned to these instance variables.

== public vs private ==

--> public
All the class members declared under public will be available 
to everyone. The data members and member functions declared public can 
be accessed by other classes too. The public members of a class can be 
accessed from anywhere in the program using the direct member access 
operator (.) with the object of that class.

--> private
The class members declared as private can be accessed only by the 
functions inside the class. They are not allowed to be accessed directly 
by any object or function outside the class. Only the member functions 
or the friend functions are allowed to access the private data members 
of a class.

== get line from stdin ==

std::string name;

std::cout << "Please, enter your full name: ";
std::getline (std::cin,name);
std::cout << "Hello, " << name << "!\n";

== str cmp ==

if (str1.compare(str2) == 0)
--> they are the same

== example of array of objects ==

#include <iostream> 
  
class MyClass { 
  int x; 
public: 
  void setX(int i) { x = i; } 
  int getX() { return x; } 
}; 
 
void main() 
{ 
  MyClass obs[4]; 
  int i; 
 
  for(i=0; i < 4; i++) 
    obs[i].setX(i); 
 
  for(i=0; i < 4; i++) 
    cout << "obs[" << i << "].getX(): " << obs[i].getX() << "\n"; 
 
  getch(); 
}

== namespace ==

A namespace is a declarative region that provides a scope to the 
identifiers (the names of types, functions, variables, etc) inside it. 
Namespaces are used to organize code into logical groups and to 
prevent name collisions that can occur especially when your code base 
includes multiple libraries. 

--> not allowed

== forbiden stuff ==

*alloc
*printf
free
namespaces
